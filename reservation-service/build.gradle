plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
}

ext {
    set('testcontainersVersion', '1.19.0')
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.9.2' // 추가

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // test
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.testcontainers:mysql'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // jwt
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //jackson
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
    implementation project(':core')
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

// QueryDsl 디렉토리 경로
def querydslSrcDir = 'src/main/generated/querydsl'

clean {
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

test {
    useJUnitPlatform()
}