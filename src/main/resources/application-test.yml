debug: true # 디버그 모드를 비활성화합니다.
management.endpoints.web.exposure.include: "*" # 모든 관리 엔드포인트를 노출합니다.

logging:
  level:
    org:
      springframework:
        security: DEBUG
    com.mgnt.ticketing: debug # com.mgnt.ticketing 패키지의 로깅 레벨을 디버그로 설정합니다.
    org.springframework.web.servlet: debug # org.springframework.web.servlet 패키지의 로깅 레벨을 디버그로 설정합니다.
#    org.hibernate.type.descriptor.sql.BasicBinder: trace # org.hibernate.type.descriptor.sql.BasicBinder 패키지의 로깅 레벨을 추적으로 설정합니다.

server:
  error:
    whitelabel:
      enabled: false
    include-message: always
  servlet:
    context-path: /
    context-parameters:
      throwExceptionIfNoHandlerFound: true

spring:
  config:
    import: optional:files:.env[.properties]
    activate:
      on-profile: test

  docker:
    compose:
      enabled: false

  jackson:
    property-naming-strategy: SNAKE_CASE

  web:
    resources:
      add-mappings: false
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}
    password: ${GMAIL_APP_PASSWORD}

    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  application:
    name: ticketing # 애플리케이션 이름을 'ticketing'으로 설정합니다.

  datasource:
    url: jdbc:h2:mem:test
    driver-class-name: org.h2.Driver
    username: sa
    password:

  jpa:
    hibernate:
      ddl-auto: create # create, update, validate, none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        default_batch_fetch_size: 500 # 지연로딩으로 발생해야 하는 쿼리를 IN절로 한번에 모아보내는 기능
  h2:
    console:
      enabled: true
      path: /h2-console

jwt:
#  secret:
#    key: ${JWT_SECRET_KEY}
    secret: "7Iqk7YyM66W07YOA7L2U65Sp7YG065+9U3ByaW5n6rCV7J2Y7Yqc7YSw7LWc7JuQ67mI7J6F64uI64ukLg=="
    access-token-validity: 3600000 # 1 hour
    refresh-token-validity: 1296000000 # 15 days

security:


springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha