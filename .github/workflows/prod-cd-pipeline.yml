name: EC2 이미지 빌드 및 배포

on:
  push:
    branches: [ release ]

env:
  ENVIRONMENT: prod
  PROJECT_NAME: ticketing
  ECR_NAME: ticketing-prod
  ECR_URI: ${{ secrets.ECR_URI }}
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ticketing
  JAVA_VERSION: '17'
  EC2_USER: ubuntu
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  build-and-deploy:
    name: 빌드 그리고 배포
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Gradle 캐시 복원
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{env.AWS_REGION}}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY}}

      - name: QEMU 구성
        uses: docker/setup-qemu-action@v2

      - name: Docker Buildx 구성
        uses: docker/setup-buildx-action@v2

      - name: 도커 허브 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_ACCOUNT }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: 도커 이미지 빌드 및 푸시
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ env.ECR_URI }}/${{ env.ECR_NAME }}:latest --push .

      - name: AWS ECR 로그인
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 태그 및 ECR에 푸시
        run: |
          docker tag ${{ env.PROJECT_NAME }}:latest ${{ env.ECR_URI }}/${{ env.ECR_NAME }}:latest
          docker push ${{ env.ECR_URI }}/${{ env.ECR_NAME }}:latest

      - name: EC2 인스턴스 상태 확인 및 시작
        run: |
          set -e
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[].Instances[].State.Name" --output text)
          if [ -z "$INSTANCE_STATE" ]; then
            echo "Invalid instance ID or instance does not exist"
            exit 1
          fi
          echo "Current instance state: $INSTANCE_STATE"
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Starting instance..."
            aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
            aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          else
            echo "Instance is already running."
          fi

      - name: EC2에서 Docker Compose 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.AWS_SECRET_KEY }}" | docker login -u "${{ secrets.AWS_ACCESS_KEY }}" --password-stdin ${{ env.ECR_URI }}
            cat > /home/ubuntu/prod-deploy-compose.yml <<EOF
            version: '3.8'
            services:
              app:
                image: ${{ env.ECR_URI }}/${{ env.ECR_NAME }}:latest
                container_name: app_container
                ports:
                  - "80:80"
                environment:
                  SPRING_PROFILES_ACTIVE: ${{ env.ENVIRONMENT }}
                  MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
                  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
                  MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
                  MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
                  MYSQL_DB_NAME: ${{ secrets.MYSQL_DB_NAME }}
                  GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
                  GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
                  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
            EOF

            # 기존 컨테이너가 존재하면 중지하고 제거
            if [ "$(docker ps -q -f name=app_container)" ]; then
              docker stop app_container
              docker rm app_container
            fi

            docker-compose -f /home/ubuntu/prod-deploy-compose.yml pull
            docker-compose -f /home/ubuntu/prod-deploy-compose.yml up -d
            echo "Hello, World!"
