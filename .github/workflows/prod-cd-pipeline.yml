name: EC2 이미지 빌드 및 배포

on:
  push:
    branches: [ release ]

env:
  ENVIRONMENT: prod
  PROJECT_NAME: ticketing
  ECR_NAME: ticketing-prod
  ECR_URI: ${{ secrets.ECR_URI }}
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ticketing
  JAVA_VERSION: '17'
  EC2_USER: ubuntu
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  build-and-deploy:
    name: 빌드 그리고 배포
    runs-on: ubuntu-latest

    steps:
      # Step 1: 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v2

      # Step 2: Gradle 캐시 복원
      - name: Gradle 캐시 복원
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Step 3: AWS 자격 증명 설정
      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      # Step 4: Docker Hub 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_ACCOUNT }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # Step 5: AWS ECR 로그인
      - name: AWS ECR 로그인
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: .env.prod 파일 생성
      - name: .env.prod 파일 생성
        run: |
          echo "PROJECT_NAME=${{env.PROJECT_NAME}}" > .env.prod
          echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> .env.prod
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env.prod
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env.prod
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env.prod
          echo "MYSQL_DB_NAME=${{ secrets.MYSQL_DB_NAME }}" >> .env.prod
          echo "GMAIL_USERNAME=${{ secrets.GMAIL_USERNAME }}" >> .env.prod
          echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> .env.prod
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env.prod

      # Step 7: .env.prod 파일 아티팩트 업로드
      - name: .env.prod 파일 아티팩트 업로드
        uses: actions/upload-artifact@v2
        with:
          name: env-prod-file
          path: .env.prod

      # Step 8: Docker Compose를 사용하여 Docker 이미지 빌드
      - name: Docker 이미지 빌드
        run: |
          docker-compose -f prod-build-compose.yml --env-file .env.prod build
          docker images

      # Step 9: Docker 이미지 태그 및 ECR에 푸시
      - name: Docker 이미지 태그 및 ECR에 푸시
        run: |
          docker tag ${PROJECT_NAME}:latest ${ECR_URI}/${ECR_NAME}:latest
          docker push ${ECR_URI}/${ECR_NAME}:latest

      # Step 10: EC2 인스턴스 상태 확인 및 시작
      - name: EC2 인스턴스 상태 확인 및 시작
        run: |
          set -e
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[].Instances[].State.Name" --output text)
          if [ -z "$INSTANCE_STATE" ]; then
            echo "Invalid instance ID or instance does not exist"
            exit 1
          fi
          echo "Current instance state: $INSTANCE_STATE"
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Starting instance..."
            aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
            aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          else
            echo "Instance is already running."
          fi

      # Step 11: 파일을 EC2로 전송하고 배포 준비
      - name: EC2에 파일 전송 및 배포 준비
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --parameters commands='[
              "rm -f /home/ubuntu/prod-deploy-compose.yml",
              "cat > /home/ubuntu/.env.prod <<EOF\n$(cat .env.prod)\nEOF",
              "cat > /home/ubuntu/prod-deploy-compose.yml <<EOF\n$(cat prod-deploy-compose.yml)\nEOF"
            ]' \
            --comment "Prepare EC2 for deployment" \
            --timeout-seconds 300 \
            --max-concurrency "50" \
            --max-errors "0"

      # Step 12: EC2에서 Docker Compose를 사용하여 배포
      - name: EC2에서 Docker Compose로 배포
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --parameters commands='[
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_URI }}",
              "docker-compose -f /home/ubuntu/prod-deploy-compose.yml --env-file /home/ubuntu/.env.prod pull",
              "docker-compose -f /home/ubuntu/prod-deploy-compose.yml --env-file /home/ubuntu/.env.prod up -d"
            ]' \
            --comment "Deploying to EC2 instance" \
            --timeout-seconds 600 \
            --max-concurrency "50" \
            --max-errors "0"
