name: EC2 이미지 빌드 및 배포

on:
  push:
    branches: [ release ]

env:
  ENVIRONMENT: prod
  PROJECT_NAME: ticketing
  ECR_NAME: ticketing-prod
  ECR_URI: ${{ secrets.ECR_URI }}
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ticketing
  JAVA_VERSION: '17'
  EC2_USER: ubuntu
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  build-and-deploy:
    name: 빌드 그리고 배포
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2

      - name: Gradle 캐시 복원
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_ACCOUNT }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: AWS ECR 로그인
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: .env.prod 파일 생성
        run: |
          echo "PROJECT_NAME=${{env.PROJECT_NAME}}" > .env.prod
          echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> .env.prod
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env.prod
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env.prod
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env.prod
          echo "MYSQL_DB_NAME=${{ secrets.MYSQL_DB_NAME }}" >> .env.prod
          echo "GMAIL_USERNAME=${{ secrets.GMAIL_USERNAME }}" >> .env.prod
          echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> .env.prod
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env.prod

      - name: .env.prod 파일 아티팩트 업로드
        uses: actions/upload-artifact@v2
        with:
          name: env-prod-file
          path: .env.prod

      - name: Docker 이미지 빌드
        run: |
          docker-compose -f prod-build-compose.yml --env-file .env.prod build
          docker images

      - name: Docker 이미지 태그 및 ECR에 푸시
        run: |
          docker tag ${PROJECT_NAME}:latest ${ECR_URI}/${ECR_NAME}:latest
          docker push ${ECR_URI}/${ECR_NAME}:latest

      - name: EC2 인스턴스 상태 확인 및 시작
        run: |
          set -e
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[].Instances[].State.Name" --output text)
          if [ -z "$INSTANCE_STATE" ]; then
            echo "Invalid instance ID or instance does not exist"
            exit 1
          fi
          echo "Current instance state: $INSTANCE_STATE"
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Starting instance..."
            aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
            aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          else
            echo "Instance is already running."
          fi

      - name: EC2에 이미 존재하는 prod-deploy-compose.yml 삭제
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            if [ -f /home/ubuntu/prod-deploy-compose.yml ]; then rm /home/ubuntu/prod-deploy-compose.yml; fi

      - name: EC2에 prod-deploy-compose.yml 전송 하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          source: "prod-deploy-compose.yml"
          target: ${{ env.REMOTE_TARGET }}

      - name: Verify file on remote server and execute commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            ls -al /home/ubuntu/prod-deploy-compose.yml
            docker-compose -f /home/ubuntu/prod-deploy-compose.yml --env-file /home/ubuntu/.env.prod up -d
          comment: Deploying to EC2 instance
          working-directory: /home/ubuntu
