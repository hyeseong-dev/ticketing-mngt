name: Build and Deploy to EC2

on:
  push:
    branches: [ develop, release-* ]

env:
  ENVIRONMENT: prod
  ECR_NAME: ticketing-prod
  ECR_URI: ${{ secrets.ECR_URI }}
  AWS_REGION: ap-northeast-2
<<<<<<< Updated upstream
  ECR_REGISTRY: 471112705943.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: ticketing
  JAVA_VERSION: '17'
=======
  EC2_USER: ubuntu
  EC2_HOST: ${{ secrets.EC2_HOST }}
>>>>>>> Stashed changes

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out code from the repository
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      # Step 3: Create .env.prod file with secrets
      - name: Create .env.prod file
        run: |
          echo "PROJECT_NAME=ticketing" > .env.prod
          echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> .env.prod
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env.prod
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env.prod
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env.prod
          echo "MYSQL_DB_NAME=${{ secrets.MYSQL_DB_NAME }}" >> .env.prod
          echo "GMAIL_USERNAME=${{ secrets.GMAIL_USERNAME }}" >> .env.prod
          echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> .env.prod
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env.prod

      # Step 4: Build Docker image using Docker Compose
      - name: Build Docker image using Docker Compose
        run: |
          docker-compose -f prod-build-compose.yml --env-file .env.prod build

      # Step 5: Tag and Push Docker image to ECR
      - name: Tag and Push Docker image to ECR
        run: |
          docker tag ${ECR_NAME}:latest ${ECR_URI}/${ECR_NAME}:latest
          docker push ${ECR_URI}/${ECR_NAME}:latest

      # Step 6: Deploy to EC2 using SSH
      - name: Deploy to EC2 using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Copy Docker Compose file to EC2
            scp -o StrictHostKeyChecking=no prod-deploy-compose.yml ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ env.EC2_USER }}/prod-deploy-compose.yml
            
            # SSH into EC2 and deploy the application
            ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
              # Login to Amazon ECR
              aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_URI }}
            
              # Pull the latest image from ECR
              docker-compose -f /home/${{ env.EC2_USER }}/prod-deploy-compose.yml pull
            
              # Start the application using Docker Compose
              docker-compose -f /home/${{ env.EC2_USER }}/prod-deploy-compose.yml up -d
            EOF
