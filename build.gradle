plugins {
    id 'org.springframework.boot' version '3.3.0' apply false
    id 'io.spring.dependency-management' version '1.1.5' apply false
    id 'java'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10' apply false
}

allprojects {
    group = 'com.mngt'
    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    ext {
        springCloudVersion = "2023.0.2"
        queryDslVersion = "5.0.0"
        jwtVersion = "0.12.5"
        jacksonVersion = '2.15.2'
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '17'
    targetCompatibility = '17'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation "org.springframework.boot:spring-boot-starter-log4j2"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }
}

def configureQuerydsl = { proj ->
    proj.dependencies {
        implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
        implementation "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
        annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    }

    def querydslDir = "${proj.buildDir}/generated/querydsl"

    proj.sourceSets {
        main {
            java {
                srcDirs += [querydslDir]
            }
        }
    }

    proj.tasks.withType(JavaCompile) {
        options.annotationProcessorPath = proj.configurations.annotationProcessor
    }

    proj.tasks.withType(JavaCompile) {
        options.generatedSourceOutputDirectory = file(querydslDir)
    }

    proj.tasks.register('generateQueryDSL', JavaCompile) {
        source = proj.sourceSets.main.java
        classpath = proj.configurations.compileClasspath
        options.annotationProcessorPath = proj.configurations.annotationProcessor
        options.generatedSourceOutputDirectory = file(querydslDir)
        options.compilerArgs += [
                "-proc:only",
                "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
        ]
    }

    proj.compileJava {
        dependsOn 'generateQueryDSL'
    }
}

project(":core") {

    dependencies {
        api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        api "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    }

    bootJar { enabled = false }
    jar { enabled = true }
}

project(":eureka-service") {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
    }
    bootJar { enabled = true }
    jar { enabled = false }
}

project(":gateway-service") {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
        implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
        implementation "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"
    }
    bootJar { enabled = true }
    jar { enabled = false }
}

def configureServiceModule = { proj ->
    proj.apply plugin: 'java'
    proj.apply plugin: 'org.springframework.boot'
    proj.apply plugin: 'io.spring.dependency-management'

    proj.dependencies {
        implementation project(':core')
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        runtimeOnly 'com.mysql:mysql-connector-j'
    }

    proj.bootJar { enabled = true }
    proj.jar { enabled = false }

    configureQuerydsl(proj)
}

project(":user-service") { configureServiceModule(it) }
project(":concert-service") { configureServiceModule(it) }
project(":payment-service") { configureServiceModule(it) }
project(":reservation-service") { configureServiceModule(it) }
project(":waiting-service") { configureServiceModule(it) }